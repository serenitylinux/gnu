# vim: ft=sh
name="gcc"
iteration="10"
version="5.2.0"
desc="GNU Compiler Collection"
bdeps=(
	'[+stage1] binutils(+dev +stage1)'

	'[+stage2] binutils(+dev +stage2)'
	'[+stage2] gcc(+dev +stage1)'
	'[+stage2] glibc(+dev +stage1)'
	'[+stage2] libstdc++(+stage1)'

	#Stage3(final)
	'[+stage3] linux-headers'
	'[+stage3] diffutils'
	'[+stage3] libstdc++'
	'[+stage3] gmp(+dev)'
	'[+stage3] mpfr(+dev)'
	'[+stage3] libmpc(+dev)'
	'[+stage3] gnu-build-tools'
)
deps=(
	'[+stage3] libc'
	'[+stage3] gmp(?dev)'
	'[+stage3] mpfr(?dev)'
	'[+stage3] libmpc(?dev)'
	'[+stage3] linux-headers'
	'[+stage3] zlib'
)
flags=('-stage1' '-stage2' '+stage3' '-dev' '-doc' '+locale')
#TODO add flag deps

srcdir="$name-$version"
src=("http://mirror.clarkson.edu/gnu/gcc/gcc-$version/gcc-$version.tar.gz")

if ( $flag_stage1 || $flag_stage2 ); then
	export PATH=/tools/bin:$PATH
fi

function configure() {
	lang="c,c++"

	mkdir ../build
	cd ../build

	# Fetch gmp, mpfr, gmp and mpc to be included directly
	# This is only needed for stage[1,2] builds
	if ( $flag_stage1 || $flag_stage2 ); then
		cd ..
		gmp_version=6.0.0a
		mpc_version=1.0.3
		mpfr_version=3.1.3
		curl "http://mirror.clarkson.edu/gnu/gmp/gmp-${gmp_version}.tar.xz" -o gmp.tar.xz
		curl "http://mirror.clarkson.edu/gnu/mpc/mpc-${mpc_version}.tar.gz" -o mpc.tar.xz
		curl "http://www.mpfr.org/mpfr-${mpfr_version}/mpfr-${mpfr_version}.tar.xz" -o mpfr.tar.xz
		tar -xf gmp.tar.xz
		tar -xf mpc.tar.xz
		tar -xf mpfr.tar.xz
		cd -
		gmp_version=6.0.0
		mv ../gmp-${gmp_version} ../${srcdir}/gmp
		mv ../mpc-${mpc_version} ../${srcdir}/mpc
		mv ../mpfr-${mpfr_version} ../${srcdir}/mpfr


		for file in $(find ../${srcdir}/gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
		do
			cp -uv $file{,.orig}
			sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' -e 's@/usr@/tools@g' $file.orig > $file
			echo '
			#undef STANDARD_STARTFILE_PREFIX_1
			#undef STANDARD_STARTFILE_PREFIX_2
			#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
			#define STANDARD_STARTFILE_PREFIX_2 ""
			' >> $file
			touch $file.orig
		done

		mkdir -p ${dest_dir}/$TMPROOT/tools
		ln -sv ${dest_dir}/$TMPROOT/tools ${dest_dir}/tools
	fi

	if ( $flag_stage1 ); then
		# Based on http://www.linuxfromscratch.org/lfs/view/development/chapter05/gcc-pass1.html
		../${srcdir}/configure \
			--prefix=/tools \
			--target=$TMPTGT \
			--with-sysroot=$TMPROOT \
			--with-glibc-version=2.11 \
			--with-newlib \
			--without-headers \
			--with-local-prefix=/tools \
			--with-native-system-header-dir=/tools/include \
			--disable-nls \
			--disable-shared \
			--disable-multilib \
			--disable-decimal-float \
			--disable-threads \
			--disable-libatomic \
			--disable-libgomp \
			--disable-libquadmath \
			--disable-libssp \
			--disable-libvtv \
			--disable-libstdcxx \
			--enable-languages=c,c++
	elif ( $flag_stage2 ); then
		# Based on http://www.linuxfromscratch.org/lfs/view/development/chapter05/gcc-pass2.html

		export \
			CC=$TMPTGT-gcc \
			CXX=$TMPTGT-g++ \
			AR=$TMPTGT-ar \
			RANLIB=$TMPTGT-ranlib

		cd ../${srcdir}
		cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
			`dirname $($TMPTGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h
		cd -

		../${srcdir}/configure \
			--prefix=/tools \
			--with-local-prefix=/tools \
			--with-native-system-header-dir=/tools/include \
			--enable-languages=c,c++ \
			--disable-libstdcxx-pch \
			--disable-multilib \
			--disable-bootstrap \
			--disable-libgomp

	else
		../${srcdir}/configure \
			--prefix=/usr \
			--enable-languages=$lang \
			--disable-multilib \
			--disable-bootstrap \
			--with-system-zlib
	fi
}

function build() {
	cd ../build
	default
}

function installpkg() {
	cd ../build
	default

	if ( $flag_stage2 ); then
		mkdir -p ${dest_dir}/tools/bin
		ln -sv gcc ${dest_dir}/tools/bin/cc
	fi
	if ( $flag_stage3 ); then
		mkdir -p ${dest_dir}/usr/bin
		ln -sv gcc ${dest_dir}/usr/bin/cc #TODO meta package
	fi

	if ( ! $flag_dev ); then
		rm -rf ${dest_dir}/usr/include
		rm ${dest_dir}/usr/lib64/*.o
	fi

	if ( ! $flag_dev ); then
		rm -rf ${dest_dir}/usr/lib/gcc/
		rm ${dest_dir}/usr/lib64/*.a
		rm ${dest_dir}/usr/lib64/*.la
		rm ${dest_dir}/usr/lib64/*.spec
	fi

	if ( ! $flag_doc ); then
		rm -rf ${dest_dir}/usr/share/info
		rm -rf ${dest_dir}/usr/share/man
	fi

	if ( ! $flag_locale ); then
		rm -rf ${dest_dir}/usr/share/locale
	fi

	if [ -f ${dest_dir}/usr/lib64/libstdc++.so.6.0.18-gdb.py ]; then
		rm ${dest_dir}/usr/lib64/libstdc++.so.6.0.18-gdb.py
	fi

	if ( $flag_stage1 || $flag_stage2 ); then
		rm ${dest_dir}/tools
	fi
}
